%TIPO DI ESERCIZIO 1

%I coefficienti del polinomio ricordati di inserirli nell'ordine giusto
%c(1) deve essere quello di grado maggiore, scendendo fino al 
%c(n+1) che deve essere il coefficiente di grado 0, ovvero lo scalare senza x
%3x^4-2x^2+pix+2
c(1)=3;
c(2)=0;
c(3)=-1;
c(4)=pi;
c(5)=2;
%o ancora meglio fai un vettore di zeri grande zeros(n+1,1)
%e inserisci solo i coefficienti noti, diversi da 0
%Dopo per utilizare ruffiniHorner non ci sono problemi


%TIPO DI ESERCIZIO 3

A=[1 3 -1; 1 2 1/2; 5 10 -1];
b=[-2 1/2 -1]';
[L,R,p,deter]=gauss2(A);

%Stampati nella testa questa formula:
%	la soluzione e solupper che ha come R R di gauss(A) e 
%	come termine noto il sllower di L e b(p)
%----------------------------------
xs=solupper(R, sollower(L,b(p)));
%----------------------------------

%Per risolvere sistemi puoi usare la fattorizzazione [L,R,p]=lu(A)
% e la soluzione xs del sistema e:
xs2=R\(L\b(p));
%Stessa roba di usare solupper e lower solo che si usa il comando \ 
%al loro posto


%PLOTTING GRAFICI
%Bella pigna nel culo. La documentazione aiuta

%FUNZIONI ANONIME
%f=@(x) 5*x+7
%quando chiamero f(2) dara 5*2+7=17

%nel plot di matlab e utile per plottare le funzioni:
%	f=@(x)3*x.^2-2*x+5
%	fplot(f,[-1,1])
%	questo fa in modo di plottare la funzione f nell'intervallo [-1,1]
%NELLA DOCUMENTAZIONE DI FPLOT C'E IL MODO DI UTILIZZARE LE FUNZIONI ANONIME


SOLUZIONE DI UN SISTEMA CON CHOLESKY

[Lc,flag]=chol(B)
if(~flag)
    fprintf('B e definita positiva\n');
    c=[7/3 1 2 -5/6]';
    xc=solupper(Lc', sollower(Lc,c))
help chol se non mi ricordo


TIPO DI ESERCIZIO 4
Devo imparare a creare from scratch Gauss-Seidel e Jacobi

Jacobi:
d0 = 4 * ones (n ,1) ; d2 = (2/3) * ones (n ,1) ; d_2 = -0.5 * ones (n ,1) ;
bn = - ones (n ,1) ; bn (2:2: end ) = 0.25;
An = spdiags ([ d2 , d0 , d_2 ] , [2 0 -2] , n , n ) ;
% Soluzione con il metodo di Jacobi
tol = 1.0 e -3; maxit = 100; x = sparse (n , 1) ; stop = 0; iter = 0;
while ( not ( stop ) )
	iter = iter + 1; xold = x ;
	x = x - ( An * x - bn ) ./ d0 ;
	stop = ( norm ( x - xold , inf ) < tol * norm (x , inf ) || ( iter == maxit ) ) ;
end
x=x-(A*x-b)./d0
praticamente la differenza tra A*x attuale e i termini noti, diviso membro a membro per la diagonale di A
sottraggo questo vettore al vettore di x attuale

Gauss-Seidel:
n = size (A ,1) ;
for k = 1 : maxit
	xtemp = x ;
	for i = 1 : n
		x(i)=(-A(i,[1:(i-1),(i+1):n])*x([1:(i-1),(i+1):n])+b(i))/A(i,i);
	end
	if ( norm ( xtemp - x , inf ) < tol * norm (x , inf ) )
		break ;	
	end
end
x(i)=(-A(i,[1:(i-1),(i+1,n)])*x([1:(i-1),(i+1):n])+b(i))/A(i,i)
praticamente l'opposto di A tranne la diagonale per il vettore x apparte l'elemento i, tutto sommato
all'elemento di b i-esimo, dividendo tutto per l'elemento (i,i) di A

TIPO DI ESERCIZIO 5
Utilizzo intellogente di polyval e polyfit
Generalmente genero i punti che mi servono
In seguito genero la matrice A con i valori e l'equazione normale 
A=[x.^2 x ones(size(x))]
Calcolo B=A'*A e c=A'*y dove y sono i valori f(x)
risolvo q=B\c
dopo per plottare lo vedro al momento



